files:
  "/tmp/generate_cert.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Generate self-signed certificate
      mkdir -p /etc/pki/tls/certs
      mkdir -p /etc/pki/tls/private
      
      if [ ! -f /etc/pki/tls/certs/server.crt ]; then
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout /etc/pki/tls/private/server.key \
          -out /etc/pki/tls/certs/server.crt \
          -subj "/C=US/ST=State/L=City/O=Organization/CN=*.elasticbeanstalk.com"
        
        chmod 600 /etc/pki/tls/private/server.key
        chmod 644 /etc/pki/tls/certs/server.crt
      fi

  "/etc/nginx/conf.d/https.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Upstream to Docker container
      upstream docker_app {
          server 127.0.0.1:8081;
      }
      
      # HTTPS server configuration
      server {
          listen 443 ssl default_server;
          server_name _;
          
          ssl_certificate /etc/pki/tls/certs/server.crt;
          ssl_certificate_key /etc/pki/tls/private/server.key;
          
          ssl_session_timeout 5m;
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers HIGH:!aNULL:!MD5;
          ssl_prefer_server_ciphers on;
          
          # Proxy to application
          location / {
              proxy_pass http://docker_app;
              proxy_http_version 1.1;
              
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto https;
              proxy_cache_bypass $http_upgrade;
          }
      }

container_commands:
  01_generate_certificate:
    command: "/tmp/generate_cert.sh"
  02_reload_nginx:
    command: "service nginx reload || systemctl reload nginx || true"
